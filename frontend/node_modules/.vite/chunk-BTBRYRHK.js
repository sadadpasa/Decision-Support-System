import {
  __DEV__,
  chakra,
  createContext,
  cx,
  filterUndefined,
  forwardRef,
  getValidChildren,
  isNull,
  isNumber,
  mapResponsive,
  omitThemingProps,
  tokenToCSSVar,
  useMultiStyleConfig,
  useStyleConfig
} from "./chunk-7G2H7PD2.js";
import {
  __toESM,
  require_react
} from "./chunk-ZGXIFTAB.js";

// node_modules/@chakra-ui/icon/dist/chakra-ui-icon.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded = ["as", "viewBox", "color", "focusable", "children", "className", "__css"];
var fallbackIcon = {
  path: React.createElement("g", {
    stroke: "currentColor",
    strokeWidth: "1.5"
  }, React.createElement("path", {
    strokeLinecap: "round",
    fill: "none",
    d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
  }), React.createElement("path", {
    fill: "currentColor",
    strokeLinecap: "round",
    d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
  }), React.createElement("circle", {
    fill: "none",
    strokeMiterlimit: "10",
    cx: "12",
    cy: "12",
    r: "11.25"
  })),
  viewBox: "0 0 24 24"
};
var Icon = forwardRef(function(props, ref) {
  var element = props.as, viewBox = props.viewBox, _props$color = props.color, color = _props$color === void 0 ? "currentColor" : _props$color, _props$focusable = props.focusable, focusable = _props$focusable === void 0 ? false : _props$focusable, children = props.children, className = props.className, __css = props.__css, rest = _objectWithoutPropertiesLoose(props, _excluded);
  var _className = cx("chakra-icon", className);
  var styles = _extends({
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color
  }, __css);
  var shared = {
    ref,
    focusable,
    className: _className,
    __css: styles
  };
  var _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
  if (element && typeof element !== "string") {
    return React.createElement(chakra.svg, _extends({
      as: element
    }, shared, rest));
  }
  var _path = children != null ? children : fallbackIcon.path;
  return React.createElement(chakra.svg, _extends({
    verticalAlign: "middle",
    viewBox: _viewBox
  }, shared, rest), _path);
});
if (__DEV__) {
  Icon.displayName = "Icon";
}
var Icon$1 = Icon;
function createIcon(options) {
  var _options$viewBox = options.viewBox, viewBox = _options$viewBox === void 0 ? "0 0 24 24" : _options$viewBox, pathDefinition = options.d, displayName = options.displayName, _options$defaultProps = options.defaultProps, defaultProps = _options$defaultProps === void 0 ? {} : _options$defaultProps;
  var path = React.Children.toArray(options.path);
  var Comp = forwardRef(function(props, ref) {
    return React.createElement(Icon, _extends({
      ref,
      viewBox
    }, defaultProps, props), path.length ? path : React.createElement("path", {
      fill: "currentColor",
      d: pathDefinition
    }));
  });
  if (__DEV__) {
    Comp.displayName = displayName;
  }
  return Comp;
}

// node_modules/@chakra-ui/layout/dist/chakra-ui-layout.esm.js
var React2 = __toESM(require_react());
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$h = ["ratio", "children", "className"];
var AspectRatio = forwardRef(function(props, ref) {
  var _props$ratio = props.ratio, ratio = _props$ratio === void 0 ? 4 / 3 : _props$ratio, children = props.children, className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded$h);
  var child = React2.Children.only(children);
  var _className = cx("chakra-aspect-ratio", className);
  return React2.createElement(chakra.div, _extends2({
    ref,
    position: "relative",
    className: _className,
    _before: {
      height: 0,
      content: '""',
      display: "block",
      paddingBottom: mapResponsive(ratio, function(r) {
        return 1 / r * 100 + "%";
      })
    },
    __css: {
      "& > *:not(style)": {
        overflow: "hidden",
        position: "absolute",
        top: "0",
        right: "0",
        bottom: "0",
        left: "0",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        height: "100%"
      },
      "& > img, & > video": {
        objectFit: "cover"
      }
    }
  }, rest), child);
});
if (__DEV__) {
  AspectRatio.displayName = "AspectRatio";
}
var _excluded$g = ["className"];
var Badge = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Badge", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$g);
  return React2.createElement(chakra.span, _extends2({
    ref,
    className: cx("chakra-badge", props.className)
  }, rest, {
    __css: _extends2({
      display: "inline-block",
      whiteSpace: "nowrap",
      verticalAlign: "middle"
    }, styles)
  }));
});
if (__DEV__) {
  Badge.displayName = "Badge";
}
var _excluded$f = ["size", "centerContent"];
var _excluded2$5 = ["size"];
var Box = chakra("div");
if (__DEV__) {
  Box.displayName = "Box";
}
var Square = forwardRef(function(props, ref) {
  var size = props.size, _props$centerContent = props.centerContent, centerContent = _props$centerContent === void 0 ? true : _props$centerContent, rest = _objectWithoutPropertiesLoose2(props, _excluded$f);
  var styles = centerContent ? {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  } : {};
  return React2.createElement(Box, _extends2({
    ref,
    boxSize: size,
    __css: _extends2({}, styles, {
      flexShrink: 0,
      flexGrow: 0
    })
  }, rest));
});
if (__DEV__) {
  Square.displayName = "Square";
}
var Circle = forwardRef(function(props, ref) {
  var size = props.size, rest = _objectWithoutPropertiesLoose2(props, _excluded2$5);
  return React2.createElement(Square, _extends2({
    size,
    ref,
    borderRadius: "9999px"
  }, rest));
});
if (__DEV__) {
  Circle.displayName = "Circle";
}
var _excluded$e = ["axis"];
var Center = chakra("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});
if (__DEV__) {
  Center.displayName = "Center";
}
var centerStyles = {
  horizontal: {
    insetStart: "50%",
    transform: "translateX(-50%)"
  },
  vertical: {
    top: "50%",
    transform: "translateY(-50%)"
  },
  both: {
    insetStart: "50%",
    top: "50%",
    transform: "translate(-50%, -50%)"
  }
};
var AbsoluteCenter = forwardRef(function(props, ref) {
  var _props$axis = props.axis, axis = _props$axis === void 0 ? "both" : _props$axis, rest = _objectWithoutPropertiesLoose2(props, _excluded$e);
  return React2.createElement(chakra.div, _extends2({
    ref,
    __css: centerStyles[axis]
  }, rest, {
    position: "absolute"
  }));
});
var _excluded$d = ["className"];
var Code = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Code", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$d);
  return React2.createElement(chakra.code, _extends2({
    ref,
    className: cx("chakra-code", props.className)
  }, rest, {
    __css: _extends2({
      display: "inline-block"
    }, styles)
  }));
});
if (__DEV__) {
  Code.displayName = "Code";
}
var _excluded$c = ["className", "centerContent"];
var Container = forwardRef(function(props, ref) {
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, centerContent = _omitThemingProps.centerContent, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$c);
  var styles = useStyleConfig("Container", props);
  return React2.createElement(chakra.div, _extends2({
    ref,
    className: cx("chakra-container", className)
  }, rest, {
    __css: _extends2({}, styles, centerContent && {
      display: "flex",
      flexDirection: "column",
      alignItems: "center"
    })
  }));
});
if (__DEV__) {
  Container.displayName = "Container";
}
var _excluded$b = ["borderLeftWidth", "borderBottomWidth", "borderTopWidth", "borderRightWidth", "borderWidth", "borderStyle", "borderColor"];
var _excluded2$4 = ["className", "orientation", "__css"];
var Divider = forwardRef(function(props, ref) {
  var _useStyleConfig = useStyleConfig("Divider", props), borderLeftWidth = _useStyleConfig.borderLeftWidth, borderBottomWidth = _useStyleConfig.borderBottomWidth, borderTopWidth = _useStyleConfig.borderTopWidth, borderRightWidth = _useStyleConfig.borderRightWidth, borderWidth = _useStyleConfig.borderWidth, borderStyle = _useStyleConfig.borderStyle, borderColor = _useStyleConfig.borderColor, styles = _objectWithoutPropertiesLoose2(_useStyleConfig, _excluded$b);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, _omitThemingProps$ori = _omitThemingProps.orientation, orientation = _omitThemingProps$ori === void 0 ? "horizontal" : _omitThemingProps$ori, __css = _omitThemingProps.__css, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded2$4);
  var dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return React2.createElement(chakra.hr, _extends2({
    ref,
    "aria-orientation": orientation
  }, rest, {
    __css: _extends2({}, styles, {
      border: "0",
      borderColor,
      borderStyle
    }, dividerStyles[orientation], __css),
    className: cx("chakra-divider", className)
  }));
});
if (__DEV__) {
  Divider.displayName = "Divider";
}
var _excluded$a = ["direction", "align", "justify", "wrap", "basis", "grow", "shrink"];
var Flex = forwardRef(function(props, ref) {
  var direction = props.direction, align = props.align, justify = props.justify, wrap = props.wrap, basis = props.basis, grow = props.grow, shrink = props.shrink, rest = _objectWithoutPropertiesLoose2(props, _excluded$a);
  var styles = {
    display: "flex",
    flexDirection: direction,
    alignItems: align,
    justifyContent: justify,
    flexWrap: wrap,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return React2.createElement(chakra.div, _extends2({
    ref,
    __css: styles
  }, rest));
});
if (__DEV__) {
  Flex.displayName = "Flex";
}
var _excluded$9 = ["area", "templateAreas", "gap", "rowGap", "columnGap", "column", "row", "autoFlow", "autoRows", "templateRows", "autoColumns", "templateColumns"];
var _excluded2$3 = ["area", "colSpan", "colStart", "colEnd", "rowEnd", "rowSpan", "rowStart"];
var Grid = forwardRef(function(props, ref) {
  var area = props.area, templateAreas = props.templateAreas, gap = props.gap, rowGap = props.rowGap, columnGap = props.columnGap, column = props.column, row = props.row, autoFlow = props.autoFlow, autoRows = props.autoRows, templateRows = props.templateRows, autoColumns = props.autoColumns, templateColumns = props.templateColumns, rest = _objectWithoutPropertiesLoose2(props, _excluded$9);
  var styles = {
    display: "grid",
    gridArea: area,
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return React2.createElement(chakra.div, _extends2({
    ref,
    __css: styles
  }, rest));
});
if (__DEV__) {
  Grid.displayName = "Grid";
}
function spanFn(span) {
  return mapResponsive(span, function(value) {
    return value === "auto" ? "auto" : "span " + value + "/span " + value;
  });
}
var GridItem = forwardRef(function(props, ref) {
  var area = props.area, colSpan = props.colSpan, colStart = props.colStart, colEnd = props.colEnd, rowEnd = props.rowEnd, rowSpan = props.rowSpan, rowStart = props.rowStart, rest = _objectWithoutPropertiesLoose2(props, _excluded2$3);
  var styles = filterUndefined({
    gridArea: area,
    gridColumn: spanFn(colSpan),
    gridRow: spanFn(rowSpan),
    gridColumnStart: colStart,
    gridColumnEnd: colEnd,
    gridRowStart: rowStart,
    gridRowEnd: rowEnd
  });
  return React2.createElement(chakra.div, _extends2({
    ref,
    __css: styles
  }, rest));
});
var _excluded$8 = ["className"];
var Heading = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Heading", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  var rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$8);
  return React2.createElement(chakra.h2, _extends2({
    ref,
    className: cx("chakra-heading", props.className)
  }, rest, {
    __css: styles
  }));
});
if (__DEV__) {
  Heading.displayName = "Heading";
}
var _excluded$7 = ["className"];
var Kbd = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Kbd", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$7);
  return React2.createElement(chakra.kbd, _extends2({
    ref,
    className: cx("chakra-kbd", className)
  }, rest, {
    __css: _extends2({
      fontFamily: "mono"
    }, styles)
  }));
});
if (__DEV__) {
  Kbd.displayName = "Kbd";
}
var _excluded$6 = ["className", "isExternal"];
var Link = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Link", props);
  var _omitThemingProps = omitThemingProps(props), className = _omitThemingProps.className, isExternal = _omitThemingProps.isExternal, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$6);
  return React2.createElement(chakra.a, _extends2({
    target: isExternal ? "_blank" : void 0,
    rel: isExternal ? "noopener noreferrer" : void 0,
    ref,
    className: cx("chakra-link", className)
  }, rest, {
    __css: styles
  }));
});
if (__DEV__) {
  Link.displayName = "Link";
}
var _excluded$5 = ["children", "styleType", "stylePosition", "spacing"];
var _excluded2$2 = ["as"];
var _excluded3 = ["as"];
var _createContext = createContext({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in a `<*List />` "
});
var StylesProvider = _createContext[0];
var useStyles = _createContext[1];
var List = forwardRef(function(props, ref) {
  var _ref;
  var styles = useMultiStyleConfig("List", props);
  var _omitThemingProps = omitThemingProps(props), children = _omitThemingProps.children, _omitThemingProps$sty = _omitThemingProps.styleType, styleType = _omitThemingProps$sty === void 0 ? "none" : _omitThemingProps$sty, stylePosition = _omitThemingProps.stylePosition, spacing = _omitThemingProps.spacing, rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$5);
  var validChildren = getValidChildren(children);
  var selector2 = "& > *:not(style) ~ *:not(style)";
  var spacingStyle = spacing ? (_ref = {}, _ref[selector2] = {
    mt: spacing
  }, _ref) : {};
  return React2.createElement(StylesProvider, {
    value: styles
  }, React2.createElement(chakra.ul, _extends2({
    ref,
    listStyleType: styleType,
    listStylePosition: stylePosition,
    role: "list",
    __css: _extends2({}, styles.container, spacingStyle)
  }, rest), validChildren));
});
if (__DEV__) {
  List.displayName = "List";
}
var OrderedList = forwardRef(function(props, ref) {
  props.as;
  var rest = _objectWithoutPropertiesLoose2(props, _excluded2$2);
  return React2.createElement(List, _extends2({
    ref,
    as: "ol",
    styleType: "decimal",
    marginStart: "1em"
  }, rest));
});
if (__DEV__) {
  OrderedList.displayName = "OrderedList";
}
var UnorderedList = forwardRef(function(props, ref) {
  props.as;
  var rest = _objectWithoutPropertiesLoose2(props, _excluded3);
  return React2.createElement(List, _extends2({
    ref,
    as: "ul",
    styleType: "initial",
    marginStart: "1em"
  }, rest));
});
if (__DEV__) {
  UnorderedList.displayName = "UnorderedList";
}
var ListItem = forwardRef(function(props, ref) {
  var styles = useStyles();
  return React2.createElement(chakra.li, _extends2({
    ref
  }, props, {
    __css: styles.item
  }));
});
if (__DEV__) {
  ListItem.displayName = "ListItem";
}
var ListIcon = forwardRef(function(props, ref) {
  var styles = useStyles();
  return React2.createElement(Icon, _extends2({
    ref,
    role: "presentation"
  }, props, {
    __css: styles.icon
  }));
});
if (__DEV__) {
  ListIcon.displayName = "ListIcon";
}
var _excluded$4 = ["columns", "spacingX", "spacingY", "spacing", "minChildWidth"];
var SimpleGrid = forwardRef(function(props, ref) {
  var columns = props.columns, spacingX = props.spacingX, spacingY = props.spacingY, spacing = props.spacing, minChildWidth = props.minChildWidth, rest = _objectWithoutPropertiesLoose2(props, _excluded$4);
  var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);
  return React2.createElement(Grid, _extends2({
    ref,
    gap: spacing,
    columnGap: spacingX,
    rowGap: spacingY,
    templateColumns
  }, rest));
});
if (__DEV__) {
  SimpleGrid.displayName = "SimpleGrid";
}
function toPx(n) {
  return isNumber(n) ? n + "px" : n;
}
function widthToColumns(width) {
  return mapResponsive(width, function(value) {
    return isNull(value) ? null : "repeat(auto-fit, minmax(" + toPx(value) + ", 1fr))";
  });
}
function countToColumns(count) {
  return mapResponsive(count, function(value) {
    return isNull(value) ? null : "repeat(" + value + ", minmax(0, 1fr))";
  });
}
var Spacer = chakra("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});
if (__DEV__) {
  Spacer.displayName = "Spacer";
}
var selector = "& > *:not(style) ~ *:not(style)";
function getStackStyles(options) {
  var _ref;
  var spacing = options.spacing, direction = options.direction;
  var directionStyles = {
    column: {
      marginTop: spacing,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: 0
    },
    row: {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: spacing
    },
    "column-reverse": {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: spacing,
      marginStart: 0
    },
    "row-reverse": {
      marginTop: 0,
      marginEnd: spacing,
      marginBottom: 0,
      marginStart: 0
    }
  };
  return _ref = {
    flexDirection: direction
  }, _ref[selector] = mapResponsive(direction, function(value) {
    return directionStyles[value];
  }), _ref;
}
function getDividerStyles(options) {
  var spacing = options.spacing, direction = options.direction;
  var dividerStyles = {
    column: {
      my: spacing,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": mapResponsive(direction, function(value) {
      return dividerStyles[value];
    })
  };
}
var _excluded$3 = ["isInline", "direction", "align", "justify", "spacing", "wrap", "children", "divider", "className", "shouldWrapChildren"];
var StackDivider = function StackDivider2(props) {
  return React2.createElement(chakra.div, _extends2({
    className: "chakra-stack__divider"
  }, props, {
    __css: _extends2({}, props["__css"], {
      borderWidth: 0,
      alignSelf: "stretch",
      borderColor: "inherit",
      width: "auto",
      height: "auto"
    })
  }));
};
var StackItem = function StackItem2(props) {
  return React2.createElement(chakra.div, _extends2({
    className: "chakra-stack__item"
  }, props, {
    __css: _extends2({
      display: "inline-block",
      flex: "0 0 auto",
      minWidth: 0
    }, props["__css"])
  }));
};
var Stack = forwardRef(function(props, ref) {
  var _ref;
  var isInline = props.isInline, directionProp = props.direction, align = props.align, justify = props.justify, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, wrap = props.wrap, children = props.children, divider = props.divider, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose2(props, _excluded$3);
  var direction = isInline ? "row" : directionProp != null ? directionProp : "column";
  var styles = React2.useMemo(function() {
    return getStackStyles({
      direction,
      spacing
    });
  }, [direction, spacing]);
  var dividerStyle = React2.useMemo(function() {
    return getDividerStyles({
      spacing,
      direction
    });
  }, [spacing, direction]);
  var hasDivider = !!divider;
  var shouldUseChildren = !shouldWrapChildren && !hasDivider;
  var validChildren = getValidChildren(children);
  var clones = shouldUseChildren ? validChildren : validChildren.map(function(child, index) {
    var key = typeof child.key !== "undefined" ? child.key : index;
    var isLast = index + 1 === validChildren.length;
    var wrappedChild = React2.createElement(StackItem, {
      key
    }, child);
    var _child = shouldWrapChildren ? wrappedChild : child;
    if (!hasDivider)
      return _child;
    var clonedDivider = React2.cloneElement(divider, {
      __css: dividerStyle
    });
    var _divider = isLast ? null : clonedDivider;
    return React2.createElement(React2.Fragment, {
      key
    }, _child, _divider);
  });
  var _className = cx("chakra-stack", className);
  return React2.createElement(chakra.div, _extends2({
    ref,
    display: "flex",
    alignItems: align,
    justifyContent: justify,
    flexDirection: styles.flexDirection,
    flexWrap: wrap,
    className: _className,
    __css: hasDivider ? {} : (_ref = {}, _ref[selector] = styles[selector], _ref)
  }, rest), clones);
});
if (__DEV__) {
  Stack.displayName = "Stack";
}
var HStack = forwardRef(function(props, ref) {
  return React2.createElement(Stack, _extends2({
    align: "center"
  }, props, {
    direction: "row",
    ref
  }));
});
if (__DEV__) {
  HStack.displayName = "HStack";
}
var VStack = forwardRef(function(props, ref) {
  return React2.createElement(Stack, _extends2({
    align: "center"
  }, props, {
    direction: "column",
    ref
  }));
});
if (__DEV__) {
  VStack.displayName = "VStack";
}
var _excluded$2 = ["className", "align", "decoration", "casing"];
var Text = forwardRef(function(props, ref) {
  var styles = useStyleConfig("Text", props);
  var _omitThemingProps = omitThemingProps(props);
  _omitThemingProps.className;
  _omitThemingProps.align;
  _omitThemingProps.decoration;
  _omitThemingProps.casing;
  var rest = _objectWithoutPropertiesLoose2(_omitThemingProps, _excluded$2);
  var aliasedProps = filterUndefined({
    textAlign: props.align,
    textDecoration: props.decoration,
    textTransform: props.casing
  });
  return React2.createElement(chakra.p, _extends2({
    ref,
    className: cx("chakra-text", props.className)
  }, aliasedProps, rest, {
    __css: styles
  }));
});
if (__DEV__) {
  Text.displayName = "Text";
}
var _excluded$1 = ["spacing", "children", "justify", "direction", "align", "className", "shouldWrapChildren"];
var _excluded2$1 = ["className"];
var Wrap = forwardRef(function(props, ref) {
  var _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? "0.5rem" : _props$spacing, children = props.children, justify = props.justify, direction = props.direction, align = props.align, className = props.className, shouldWrapChildren = props.shouldWrapChildren, rest = _objectWithoutPropertiesLoose2(props, _excluded$1);
  var styles = React2.useMemo(function() {
    return {
      "--chakra-wrap-spacing": function chakraWrapSpacing(theme) {
        return mapResponsive(spacing, function(value) {
          return tokenToCSSVar("space", value)(theme);
        });
      },
      "--wrap-spacing": "calc(var(--chakra-wrap-spacing) / 2)",
      display: "flex",
      flexWrap: "wrap",
      justifyContent: justify,
      alignItems: align,
      flexDirection: direction,
      listStyleType: "none",
      padding: "0",
      margin: "calc(var(--wrap-spacing) * -1)",
      "& > *:not(style)": {
        margin: "var(--wrap-spacing)"
      }
    };
  }, [spacing, justify, align, direction]);
  var childrenToRender = shouldWrapChildren ? React2.Children.map(children, function(child, index) {
    return React2.createElement(WrapItem, {
      key: index
    }, child);
  }) : children;
  return React2.createElement(chakra.div, _extends2({
    ref,
    className: cx("chakra-wrap", className)
  }, rest), React2.createElement(chakra.ul, {
    className: "chakra-wrap__list",
    __css: styles
  }, childrenToRender));
});
if (__DEV__) {
  Wrap.displayName = "Wrap";
}
var WrapItem = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded2$1);
  return React2.createElement(chakra.li, _extends2({
    ref,
    __css: {
      display: "flex",
      alignItems: "flex-start"
    },
    className: cx("chakra-wrap__listitem", className)
  }, rest));
});
if (__DEV__) {
  WrapItem.displayName = "WrapItem";
}
var _excluded2 = ["isExternal", "target", "rel", "className"];
var _excluded22 = ["className"];
var LinkOverlay = forwardRef(function(props, ref) {
  var isExternal = props.isExternal, target = props.target, rel = props.rel, className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded2);
  return React2.createElement(chakra.a, _extends2({}, rest, {
    ref,
    className: cx("chakra-linkbox__overlay", className),
    rel: isExternal ? "noopener noreferrer" : rel,
    target: isExternal ? "_blank" : target,
    __css: {
      position: "static",
      "&::before": {
        content: "''",
        cursor: "inherit",
        display: "block",
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 1,
        width: "100%",
        height: "100%"
      }
    }
  }));
});
var LinkBox = forwardRef(function(props, ref) {
  var className = props.className, rest = _objectWithoutPropertiesLoose2(props, _excluded22);
  return React2.createElement(chakra.div, _extends2({
    ref,
    position: "relative"
  }, rest, {
    className: cx("chakra-linkbox", className),
    __css: {
      "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
        position: "relative",
        zIndex: 1
      }
    }
  }));
});

export {
  Icon,
  Icon$1,
  createIcon,
  AspectRatio,
  Badge,
  Box,
  Square,
  Circle,
  Center,
  AbsoluteCenter,
  Code,
  Container,
  Divider,
  Flex,
  Grid,
  GridItem,
  Heading,
  Kbd,
  Link,
  List,
  OrderedList,
  UnorderedList,
  ListItem,
  ListIcon,
  SimpleGrid,
  Spacer,
  StackDivider,
  StackItem,
  Stack,
  HStack,
  VStack,
  Text,
  Wrap,
  WrapItem,
  LinkOverlay,
  LinkBox
};
//# sourceMappingURL=chunk-BTBRYRHK.js.map
