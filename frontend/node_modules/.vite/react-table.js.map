{
  "version": 3,
  "sources": ["../react-table/src/publicUtils.js", "../react-table/src/utils.js", "../react-table/src/makeDefaultPluginHooks.js", "../react-table/src/hooks/useColumnVisibility.js", "../react-table/src/hooks/useTable.js", "../react-table/src/plugin-hooks/useExpanded.js", "../react-table/src/filterTypes.js", "../react-table/src/plugin-hooks/useFilters.js", "../react-table/src/plugin-hooks/useGlobalFilter.js", "../react-table/src/aggregations.js", "../react-table/src/plugin-hooks/useGroupBy.js", "../react-table/src/sortTypes.js", "../react-table/src/plugin-hooks/useSortBy.js", "../react-table/src/plugin-hooks/usePagination.js", "../react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js", "../react-table/src/plugin-hooks/useRowSelect.js", "../react-table/src/plugin-hooks/useRowState.js", "../react-table/src/plugin-hooks/useColumnOrder.js", "../react-table/src/plugin-hooks/useResizeColumns.js", "../react-table/src/plugin-hooks/useAbsoluteLayout.js", "../react-table/src/plugin-hooks/useBlockLayout.js", "../react-table/src/plugin-hooks/useFlexLayout.js", "../react-table/src/plugin-hooks/useGridLayout.js", "../react-table/index.js", "dep:react-table"],
  "sourcesContent": ["import React from 'react'\n\nlet renderErr = 'Renderer Error \u261D\uFE0F'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook \u261D\uFE0F just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook \u261D\uFE0F just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n", "import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n", "const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n", "import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n", "import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action \uD83D\uDC46')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n", "import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n", "export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n", "import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n", "import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n", "export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n", "import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n", "const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n", "import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n", "import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n", "/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n", "import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n", "import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n", "import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n", "import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n", "const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n", "const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n", "export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n", "export function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n    },\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`),\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const { columnId } = action\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\n    const elWidth = getElementWidth(columnId)\n\n    if (elWidth !== undefined) {\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths,\n    } = state.gridLayout\n\n    const change = state.columnResizing.startX - action.clientX\n    const newWidth = startingWidth - change\n    const columnWidthsCopy = [...columnWidths]\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: columnWidthsCopy,\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}", "if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n", "export default require(\"./node_modules/react-table/index.js\");"],
  "mappings": "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",
  "names": []
}
